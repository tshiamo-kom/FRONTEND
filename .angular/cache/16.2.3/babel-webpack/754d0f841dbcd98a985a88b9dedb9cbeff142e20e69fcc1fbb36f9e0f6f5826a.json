{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../task-service.service\";\nimport * as i2 from \"@angular/forms\";\nexport class TaskCreateComponent {\n  constructor(taskService) {\n    this.taskService = taskService;\n  }\n  onaddtask(taskform) {\n    if (taskform.invalid) {\n      alert('Invalid input');\n      return;\n    }\n    alert(taskform.value.task + '\\n' + taskform.value.description + '\\n' + taskform.value.status);\n    this.taskService.addtask_service(taskform.value.task, taskform.value.description, taskform.value.stat);\n  }\n}\n_class = TaskCreateComponent;\n_class.ɵfac = function TaskCreateComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.TaskServiceService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-task-create\"]],\n  decls: 26,\n  vars: 0,\n  consts: [[2, \"text-align\", \"center\"], [2, \"text-align\", \"center\", 3, \"submit\"], [\"task\", \"ngForm\"], [\"for\", \"task\"], [\"type\", \"text\", \"ngModel\", \"\", \"name\", \"task\", \"placeholder\", \"Enter Task Name (required)\", \"required\", \"\", \"minlength\", \"5\", \"pattern\", \"^[a-zA-Z0-9\\\\s_-]+$\"], [\"task\", \"ngModel\"], [\"for\", \"description\"], [\"type\", \"text\", \"ngModel\", \"\", \"name\", \"description\", \"placeholder\", \"Enter Task Description (required)\", \"required\", \"\", \"minlength\", \"5\", \"pattern\", \"^[a-zA-Z0-9\\\\s_-]+$\"], [\"for\", \"status\"], [\"type\", \"text\", \"ngModel\", \"\", \"name\", \"task\", \"placeholder\", \"Enter Task Status (required)\", \"required\", \"\", \"minlength\", \"5\", \"pattern\", \"^[a-zA-Z0-9\\\\s_-]+$\"], [\"type\", \"submit\"]],\n  template: function TaskCreateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r4 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"h3\", 0);\n      i0.ɵɵtext(1, \"Create a New Task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\", 0);\n      i0.ɵɵtext(3, \"Please fill in every required field.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 1, 2);\n      i0.ɵɵlistener(\"submit\", function TaskCreateComponent_Template_form_submit_4_listener() {\n        i0.ɵɵrestoreView(_r4);\n        const _r0 = i0.ɵɵreference(5);\n        return i0.ɵɵresetView(ctx.onaddtask(_r0));\n      });\n      i0.ɵɵelementStart(6, \"label\", 3);\n      i0.ɵɵtext(7, \"Task Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"br\")(9, \"input\", 4, 5)(11, \"br\");\n      i0.ɵɵelementStart(12, \"label\", 6);\n      i0.ɵɵtext(13, \"Task Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"br\")(15, \"input\", 7, 5)(17, \"br\");\n      i0.ɵɵelementStart(18, \"label\", 8);\n      i0.ɵɵtext(19, \"Task Status\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"br\")(21, \"input\", 9, 5)(23, \"br\");\n      i0.ɵɵelementStart(24, \"button\", 10);\n      i0.ɵɵtext(25, \"Add Task\");\n      i0.ɵɵelementEnd()();\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.MinLengthValidator, i2.PatternValidator, i2.NgModel, i2.NgForm],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["TaskCreateComponent","constructor","taskService","onaddtask","taskform","invalid","alert","value","task","description","status","addtask_service","stat","i0","ɵɵdirectiveInject","i1","TaskServiceService","selectors","decls","vars","consts","template","TaskCreateComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TaskCreateComponent_Template_form_submit_4_listener","ɵɵrestoreView","_r4","_r0","ɵɵreference","ɵɵresetView","ɵɵelement"],"sources":["C:\\Users\\lab_services_student\\Documents\\OpenSSL-Win64\\bin\\FRONTEND\\src\\app\\tasks\\task-create\\task-create.component.ts","C:\\Users\\lab_services_student\\Documents\\OpenSSL-Win64\\bin\\FRONTEND\\src\\app\\tasks\\task-create\\task-create.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { TaskServiceService } from '../task-service.service'; // Make sure the path is correct\n\n@Component({\n  selector: 'app-task-create',\n  templateUrl: './task-create.component.html',\n  styleUrls: ['./task-create.component.css']\n})\nexport class TaskCreateComponent {\n\n  constructor(public taskService: TaskServiceService) { }\n\n  onaddtask(taskform: NgForm) {\n    if (taskform.invalid) {\n      alert('Invalid input');\n      return;\n    }\n    alert(taskform.value.task + '\\n' + taskform.value.description + '\\n' + taskform.value.status);\n    this.taskService.addtask_service(taskform.value.task, taskform.value.description, taskform.value.stat);\n  }\n}\n","<h3 style=\"text-align: center;\">Create a New Task</h3>\n<p style=\"text-align: center;\">Please fill in every required field.</p>\n\n<form (submit)=\"onaddtask(task)\" #task=\"ngForm\" style=\"text-align: center;\">\n    <label for=\"task\">Task Name</label><br/>\n    <input type=\"text\"\nngModel name=\"task\"\nplaceholder=\"Enter Task Name (required)\"\nrequired\nminlength=\"5\"\npattern=\"^[a-zA-Z0-9\\s_-]+$\"\n    #task=\"ngModel\"/><br/>\n    <label for=\"description\">Task Description</label><br/>\n    <input type=\"text\"\nngModel name=\"description\"\nplaceholder=\"Enter Task Description (required)\"\nrequired\nminlength=\"5\"\npattern=\"^[a-zA-Z0-9\\s_-]+$\"\n    #task=\"ngModel\"/><br/>\n    <label for=\"status\">Task Status</label><br/>\n    <input type=\"text\"\nngModel name=\"task\"\nplaceholder=\"Enter Task Status (required)\"\nrequired\nminlength=\"5\"\npattern=\"^[a-zA-Z0-9\\s_-]+$\"\n    #task=\"ngModel\"/><br/>\n<button type=\"submit\">Add Task</button>\n</form>\n"],"mappings":";;;;AASA,OAAM,MAAOA,mBAAmB;EAE9BC,YAAmBC,WAA+B;IAA/B,KAAAA,WAAW,GAAXA,WAAW;EAAwB;EAEtDC,SAASA,CAACC,QAAgB;IACxB,IAAIA,QAAQ,CAACC,OAAO,EAAE;MACpBC,KAAK,CAAC,eAAe,CAAC;MACtB;;IAEFA,KAAK,CAACF,QAAQ,CAACG,KAAK,CAACC,IAAI,GAAG,IAAI,GAAGJ,QAAQ,CAACG,KAAK,CAACE,WAAW,GAAG,IAAI,GAAGL,QAAQ,CAACG,KAAK,CAACG,MAAM,CAAC;IAC7F,IAAI,CAACR,WAAW,CAACS,eAAe,CAACP,QAAQ,CAACG,KAAK,CAACC,IAAI,EAAEJ,QAAQ,CAACG,KAAK,CAACE,WAAW,EAAEL,QAAQ,CAACG,KAAK,CAACK,IAAI,CAAC;EACxG;;SAXWZ,mBAAmB;;mBAAnBA,MAAmB,EAAAa,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,kBAAA;AAAA;;QAAnBhB,MAAmB;EAAAiB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;MCThCV,EAAA,CAAAY,cAAA,YAAgC;MAAAZ,EAAA,CAAAa,MAAA,wBAAiB;MAAAb,EAAA,CAAAc,YAAA,EAAK;MACtDd,EAAA,CAAAY,cAAA,WAA+B;MAAAZ,EAAA,CAAAa,MAAA,2CAAoC;MAAAb,EAAA,CAAAc,YAAA,EAAI;MAEvEd,EAAA,CAAAY,cAAA,iBAA4E;MAAtEZ,EAAA,CAAAe,UAAA,oBAAAC,oDAAA;QAAAhB,EAAA,CAAAiB,aAAA,CAAAC,GAAA;QAAA,MAAAC,GAAA,GAAAnB,EAAA,CAAAoB,WAAA;QAAA,OAAUpB,EAAA,CAAAqB,WAAA,CAAAV,GAAA,CAAArB,SAAA,CAAA6B,GAAA,CAAe;MAAA,EAAC;MAC5BnB,EAAA,CAAAY,cAAA,eAAkB;MAAAZ,EAAA,CAAAa,MAAA,gBAAS;MAAAb,EAAA,CAAAc,YAAA,EAAQ;MAAAd,EAAA,CAAAsB,SAAA,SAAK;MAQxCtB,EAAA,CAAAY,cAAA,gBAAyB;MAAAZ,EAAA,CAAAa,MAAA,wBAAgB;MAAAb,EAAA,CAAAc,YAAA,EAAQ;MAAAd,EAAA,CAAAsB,SAAA,UAAK;MAQtDtB,EAAA,CAAAY,cAAA,gBAAoB;MAAAZ,EAAA,CAAAa,MAAA,mBAAW;MAAAb,EAAA,CAAAc,YAAA,EAAQ;MAAAd,EAAA,CAAAsB,SAAA,UAAK;MAQhDtB,EAAA,CAAAY,cAAA,kBAAsB;MAAAZ,EAAA,CAAAa,MAAA,gBAAQ;MAAAb,EAAA,CAAAc,YAAA,EAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}