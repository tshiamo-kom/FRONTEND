{"ast":null,"code":"var _class;\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskServiceService {\n  constructor(http) {\n    this.http = http;\n    this.taskdisplay = [];\n    this.updatedtaskdisplay = new Subject();\n  }\n  addtask_service(pid, pname, pstatus) {\n    this.http.post('https://localhost:3000/api/tasks', {\n      id: pid,\n      name: pname,\n      status: pstatus\n    }).subscribe(thetask => {\n      this.taskdisplay.push(thetask.task);\n      this.updatedtaskdisplay.next([...this.taskdisplay]);\n    });\n  }\n  gettask_service() {\n    this.http.get('https://localhost:4200/api/tasks').subscribe(thetask => {\n      this.taskdisplay = thetask.task;\n      this.updatedtaskdisplay.next([...this.taskdisplay]);\n    });\n  }\n  deletetask_service(task) {\n    this.http.delete('https:/localhost:3000/api/tasks/' + task).subscribe(() => {\n      const updatedtaskdeleted = this.taskdisplay.filter(taskItem => taskItem.task !== task);\n      this.taskdisplay = updatedtaskdeleted;\n      this.updatedtaskdisplay.next([...this.taskdisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedtaskdisplay.asObservable();\n  }\n}\n_class = TaskServiceService;\n_class.ɵfac = function TaskServiceService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","TaskServiceService","constructor","http","taskdisplay","updatedtaskdisplay","addtask_service","pid","pname","pstatus","post","id","name","status","subscribe","thetask","push","task","next","gettask_service","get","deletetask_service","delete","updatedtaskdeleted","filter","taskItem","getUpdateListener","asObservable","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\lab_services_student\\Documents\\OpenSSL-Win64\\bin\\FRONTEND\\src\\app\\tasks\\task-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core'; \nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskServiceService {\n\n  private taskdisplay: { task: string, description: string, status: string }[] = [];\n  private updatedtaskdisplay = new Subject<{ task: string, description: string, status: string }[]>();\n  \n  constructor(private http: HttpClient) { }\n\n  addtask_service(pid: string, pname: string, pstatus: string) {\n    this.http.post<{ message: string, task: any }>('https://localhost:3000/api/tasks', { id: pid, name: pname, status: pstatus })\n    .subscribe((thetask) => {\n      this.taskdisplay.push(thetask.task);\n      this.updatedtaskdisplay.next([...this.taskdisplay]);\n    })\n  }\n\n  gettask_service() {\n    this.http.get<{ message: string, task: any }>('https://localhost:4200/api/tasks')\n    .subscribe((thetask) => {\n      this.taskdisplay = thetask.task\n      this.updatedtaskdisplay.next([...this.taskdisplay]);\n    })\n  }\n\n  deletetask_service(task: string) {\n    this.http.delete('https:/localhost:3000/api/tasks/' + task)\n    .subscribe(() => {\n      const updatedtaskdeleted = this.taskdisplay.filter(taskItem => taskItem.task !== task);\n      this.taskdisplay = updatedtaskdeleted;\n      this.updatedtaskdisplay.next([...this.taskdisplay]);\n    })\n  }\n  \n\n  getUpdateListener() {\n    return this.updatedtaskdisplay.asObservable();\n  }\n}\n"],"mappings":";AAEA,SAASA,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,kBAAkB;EAK7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,WAAW,GAA4D,EAAE;IACzE,KAAAC,kBAAkB,GAAG,IAAIL,OAAO,EAA2D;EAE3D;EAExCM,eAAeA,CAACC,GAAW,EAAEC,KAAa,EAAEC,OAAe;IACzD,IAAI,CAACN,IAAI,CAACO,IAAI,CAAiC,kCAAkC,EAAE;MAAEC,EAAE,EAAEJ,GAAG;MAAEK,IAAI,EAAEJ,KAAK;MAAEK,MAAM,EAAEJ;IAAO,CAAE,CAAC,CAC5HK,SAAS,CAAEC,OAAO,IAAI;MACrB,IAAI,CAACX,WAAW,CAACY,IAAI,CAACD,OAAO,CAACE,IAAI,CAAC;MACnC,IAAI,CAACZ,kBAAkB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACd,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAe,eAAeA,CAAA;IACb,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAiC,kCAAkC,CAAC,CAChFN,SAAS,CAAEC,OAAO,IAAI;MACrB,IAAI,CAACX,WAAW,GAAGW,OAAO,CAACE,IAAI;MAC/B,IAAI,CAACZ,kBAAkB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACd,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAiB,kBAAkBA,CAACJ,IAAY;IAC7B,IAAI,CAACd,IAAI,CAACmB,MAAM,CAAC,kCAAkC,GAAGL,IAAI,CAAC,CAC1DH,SAAS,CAAC,MAAK;MACd,MAAMS,kBAAkB,GAAG,IAAI,CAACnB,WAAW,CAACoB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACR,IAAI,KAAKA,IAAI,CAAC;MACtF,IAAI,CAACb,WAAW,GAAGmB,kBAAkB;MACrC,IAAI,CAAClB,kBAAkB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACd,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ;EAGAsB,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACrB,kBAAkB,CAACsB,YAAY,EAAE;EAC/C;;SAnCW1B,kBAAkB;;mBAAlBA,MAAkB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAlB9B,MAAkB;EAAA+B,OAAA,EAAlB/B,MAAkB,CAAAgC,IAAA;EAAAC,UAAA,EAFjB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}